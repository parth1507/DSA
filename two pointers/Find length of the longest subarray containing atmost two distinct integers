Method 1->naive approach

Code:- 
def totalFruit(self, fruits: List[int]) -> int:
        n=len(fruits)
        max_length=0

        for i in range(0,n):
            max_fruits=set()
            for j in range(i,n):
                max_fruits.add(fruits[j])
                if len(max_fruits)<=2:
                    max_length=max(max_length,j-i+1)
                else:
                    break
        
        return max_length

TC-> O(N^2)
SC->O(1)

Method 2-> optimized approach 
Explanation:- The idea is to use the sliding window approach and use the map to store the 
contiguous frequency of the elements.

Code:- 
def totalElements(self,arr):
        # Code here
        n=len(arr)
        l=0
        r=0
        ans={}
        maxlength=0
        
        while r<n:
            
            ans[arr[r]] = ans.get(arr[r], 0) + 1

            
            while len(ans) > 2:
                
                ans[arr[l]] = ans.get(arr[l], 0) - 1

                if ans[arr[l]]==0:
                    del ans[arr[l]]
                
                l=l+1
            
            maxlength=max(maxlength,r-l+1)
            r=r+1
        
        return maxlength
TC->O(N)
SC->O(1)
