Method 1 -> Optimized way

Explanation:- 

This solution uses ideas from both of the previous approaches. We maintain a window and inside the window, we maintain frequency of the most frequent character. 
To find and maintain the most frequent character, we use hash map. Below are the detailed steps.

1) We maintain a window between indices l and r. The window slides to the right, expanding or contracting depending on the number of changes needed to make all characters 
the same.
2) We keep track of the most frequent character in the current window.
3) If the number of characters that need to be changed (r - l + 1 - maxFreq) exceeds k, we shrink the window by moving the left boundary l to the right. Else we keep 
expanding the window on right side.

Code:- 

def characterReplacement(self, s: str, k: int) -> int:
        n=len(s)
        count={}
        maxlength=0
        l=0
        r=0

        while r<n:
            count[s[r]]=count.get(s[r],0) + 1

            while (r-l+1) - max(count.values()) > k:
                count[s[l]]-=1
                l=l+1
            
            maxlength=max(maxlength,r-l+1)
            r=r+1
        
        return maxlength

TC->O(N)
SC->O(1)
