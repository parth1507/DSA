Method 1->

class info{
    public:
    int maxi;
    int mini;
    bool isBST;
    int size;
};
info solve(Node *root,int &ans){
    //base case
    if(root==NULL){
        return {INT_MIN,INT_MAX,true,0};
    }
    
    info left=solve(root->left,ans);
    info right=solve(root->right,ans);
    
    info curNode;
    curNode.size=left.size+right.size+1;
    curNode.maxi=max(root->data,right.maxi);
    curNode.mini=min(root->data,left.mini);
    
    if(left.isBST && right.isBST && (root->data > left.maxi && root->data < right.mini)){
        curNode.isBST=true;
    }
    else{
        curNode.isBST=false;
    }
    
    
    if(curNode.isBST){
        ans=max(ans,curNode.size);
    }
    
    return curNode;
}
class Solution{
    
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
       int maxsize=0;
       info temp=solve(root,maxsize);
       return maxsize;
    }
};

TC->O(N)
SC->O(N) considering recursion stack
