Method 1-> brute force
 vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        int n=nums.size();
        int m=queries.size();

        vector<int> ans(m,0);
        sort(nums.begin(),nums.end());
        for(int i=0;i<m;i++){
            int sum=0;
            int k=queries[i];
            int l=0;

            for(int j=0;j<n;j++){
                if(sum+nums[j] > k) break;
                sum+=nums[j];
                l++;
            }
             ans[i] = l;
        }
        return ans;
    }
  TC->O(m*n)+O(nlogn)
  SC->O(m)
  
  Method 2->
  
  int binarySearch(vector<int>& nums,int size,int target){
         int l=0;
         int r=size-1;

         int result_idx=-1;

         while(l<=r){  
           int mid= l+(r-l)/2;

           if(nums[mid] <= target){
               result_idx=mid;
               l=mid+1;
            }
            else{
                r=mid-1;
            }
         }
         return result_idx + 1;
     }
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        int n=nums.size();
        int m=queries.size();

        sort(nums.begin(),nums.end());

        for(int i=1;i<n;i++){
            nums[i]+=nums[i-1];
        }

        vector<int> result;
  
        for(int &query : queries){
            int count=binarySearch(nums,n,query);

            result.push_back(count);
        }
        return result;
    }
    
   TC-> O(nlogn) + O(mlogn)
   SC->O(1)
