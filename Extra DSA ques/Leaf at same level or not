Method 1->

void solve(Node* root,unordered_map<int,int> &m,int lvl){
         if(root==NULL){
             return ;
         }
         
         if(root->left==NULL && root->right==NULL){
             m[lvl]++;
             return;
         }
         
         solve(root->left,m,lvl+1);
         solve(root->right,m,lvl+1);
    }
    
    bool check(Node *root)
    {
        unordered_map<int,int> m;
        int lvl=0;
        
        solve(root,m,lvl);
        if(m.size() > 1){
            return false;
        }
        return true;
    }
    TC->O(N)
    SC->O(N)

Method 2->
void solve(Node* root,int &ma,int h,int &ans){
        if(root==NULL){
            return ;
        }
        if(root->left==NULL && root->right==NULL){
            if(ma==-1){
                ma=h;
            }
            if(ma!=h){
                ans=0;
            }
            return ;
        }
        solve(root->left,ma,h+1,ans);
        solve(root->right,ma,h+1,ans);
    }
    bool check(Node *root)
    {
        //Your code here
        int ma=-1;
        int h=0;
        int ans=1;
        
        solve(root,ma,h,ans);
        if(ans==0){
            return false;
        }
        else{
            return true;
        }
    }
    TC->O(N)
    SC->O(1) if we do not consider recusrion stack
    
