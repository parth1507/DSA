Method 1-> using sorting and hashmap

bool static cmp(pair<char,int> &a, pair<char,int> &b){
        return a.second > b.second;
    }
    string frequencySort(string s) {
        unordered_map<char,int> m;
        for(int i=0;i<s.length();i++){
            m[s[i]]++;
        }

        vector<pair<char,int>> v;
        for(auto i:m){
            v.push_back({i.first,i.second});
        }

        sort(v.begin(),v.end(),cmp);

        string ans="";

        for(auto i:v){
            for(int j=0;j<i.second;j++){
                ans+=i.first;
            }
        }
        return ans;
    }
  TC->O(Nlogn)
  SC->O(N)
  
  Method 2-> using maxheap
  
  string frequencySort(string s) {
        unordered_map<char,int> m;

        for(int i=0;i<s.length();i++){
            m[s[i]]++;
        }

        priority_queue<pair<int,char>> pq;

        for(auto x:m){
            pq.push({x.second,x.first});
        }

        string ans="";
        while(!pq.empty()){
            auto x=pq.top();
            pq.pop();

            for(int i=0;i<x.first;i++){
                ans+=x.second;
            }
        }
        return ans;
    }
    
   TC->O(Nlogn)
   SC->O(N)
