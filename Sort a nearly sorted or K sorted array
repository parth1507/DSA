Method 1-> using simple sorting
void insertionSort(int A[], int size)
{
   int i, key, j;
   for(i = 1; i < size; i++)
   {
       key = A[i];
       j = i - 1;
 
       /* Move elements of A[0..i-1], that are
          greater than key, to one
          position ahead of their current position.
          This loop will run at most k times */
       while (j >= 0 && A[j] > key)
       {
           A[j + 1] = A[j];
           j = j - 1;
       }
       A[j + 1] = key;
   }
}
TC->O(NK)
SC->O(1)


Method 2-> using min heap
vector <int> nearlySorted(int arr[], int num, int K){
        vector<int> ans;
        priority_queue<int, vector<int>, greater<int>> pq;
        
        for(int i=0;i<num;i++){
            pq.push(arr[i]);
            if(pq.size()>K){
                ans.push_back(pq.top());
                pq.pop();
            }
        }
        for(int i=0;i<K;i++){
            ans.push_back(pq.top());
            pq.pop();
        }
        return ans;
    }
  TC->O(NlogK)
  SC->O(k)
