Method 1->
private:
    void solve(int i,vector<int>& candidates,int target,vector<int> output,vector<vector<int>> &ans){
        //base case
        if(i==candidates.size()){
            if(target==0){
                ans.push_back(output);
            }
            return;
        }
        
        if(candidates[i]<=target){
            output.push_back(candidates[i]);
            solve(i,candidates,target-candidates[i],output,ans);
            output.pop_back();
        }
        
        //exclude case
        solve(i+1,candidates,target,output,ans);
        
    }
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> output;
        int i=0;
        
        solve(i,candidates,target,output,ans);
        return ans;
    }
    
   TC->O(2^t * k)
   SC-> It depends upon number of combinations
