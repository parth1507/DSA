Method 1->
void solve(vector<int> nums,vector<vector<int>> &ans,int i){
        //base case
        if(i>=nums.size()){
            ans.push_back(nums);
            return;
        }
        
        for(int j=i;j<nums.size();j++){
            swap(nums[i],nums[j]);
            solve(nums,ans,i+1);
            //backtrack
            swap(nums[i],nums[j]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int i=0;
        solve(nums,ans,i);
        return ans;
    }
  TC->O(2^n)
  SC->O(n)


Method 2->
private:
void solve(vector<int>& nums,int freq[],vector<vector<int>> &ans,vector<int> ds){
    //base case
    if(ds.size()==nums.size()){
        ans.push_back(ds);
        return;
    }
    
    for(int i=0;i<nums.size();i++){
        if(!freq[i]){
            ds.push_back(nums[i]);
            freq[i]=1;
            solve(nums,freq,ans,ds);
            freq[i]=0;
            ds.pop_back();
        }
    }
}
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> ds;
        int freq[nums.size()];
        for(int i=0;i<nums.size();i++) freq[i]=0;
        solve(nums,freq,ans,ds);
        return ans;
        
    }
 TC->O(n! * n)
 SC->O(n)+O(n)
