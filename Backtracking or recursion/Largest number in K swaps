Method 1-> optimized recursion
void helper(string &max, string str, int k, int idx){
        
        if(k==0){
            return;
        }
        
        int n=str.length();
        char maxc = str[idx];
        for(int i=idx+1;i<n;i++){
            if(maxc<str[i]){
                maxc=str[i];
            }
        }
        
        if(maxc != str[idx]){
            k-=1;
        }
        
        for(int i=n-1;i>=idx;i--){
            if(str[i]==maxc){
                swap(str[i],str[idx]);
                if (str>max)
                    max = str;
                    
                helper(max, str, k, idx+1);
                swap(str[i],str[idx]);
            }

        }

    }
    
    //Function to find the largest number after k swaps.
    string findMaximumNum(string str, int k)
    {
       // code here.
       string max=str;
       helper(max, str, k, 0);
       return max;
    }
    
    TC->O(n^k)
    SC->O(n)
    
    
    method 2->brute force
    void findMaximumNum(
    string str, int k, string& max)
{
    // Return if no swaps left
    if (k == 0)
        return;
 
    int n = str.length();
 
    // Consider every digit
    for (int i = 0; i < n - 1; i++) {
 
        // Compare it with all digits after it
        for (int j = i + 1; j < n; j++) {
        
            if (str[i] < str[j]) {
                // swap str[i] with str[j]
                swap(str[i], str[j]);
 
                // If current num is more
                // than maximum so far
                if (str.compare(max) > 0)
                    max = str;
 
                // recurse of the other k - 1 swaps
                findMaximumNum(str, k - 1, max);
 
                // Backtrack
                swap(str[i], str[j]);
            }
        }
    }
}

TC->O((n^2)^k)
SC->O(n)
