Method 1->greedy approach
long long int maxSum(int arr[], int n)
{
    sort(arr,arr+n);
   long long ans=0;
   int i=0;
   int j=n-1;
   while(i<j)
   {
       ans+=abs(arr[j]-arr[i]);
       ans+=abs(arr[j]-arr[i+1]);
       i++;
       j--;
   }
   ans=ans+abs(arr[i]-arr[0]);
   return ans;
}
TC->O(nlogn)
SC->O(1)

Method 2->
long long int maxSum(int arr[], int n)
{
    sort(arr,arr+n);
    vector<int> v;
    int l=0,r=n-1;
    int sum=0;
    
    while(l<r){
        v.push_back(arr[l]);
        v.push_back(arr[r]);
        l++;
        r--;
    }
    if(n%2==1) v.push_back(arr[l]);
    for(int i=0;i<v.size()-1;i++){
        sum+=abs(v[i]-v[i+1]);
    }
    sum+=abs(v[0]-v[n-1]);
    return sum;
}
TC->O(nlogn)
SC->O(n)
