Method1 -> Greedy Approach

Explanation:- To understand this approach, think of it as trying to keep intervals short so we have more space for other 
intervals, without overlap. By sorting intervals by their end times, we can easily check if the next interval overlaps with 
the previous one. If there’s an overlap, we remove the interval with the later end time, so it doesn’t block the next intervals 
from fitting in. This way, we end up with the minimum number of removals needed to make all intervals non-overlapping.

Code:- 

def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        n=len(intervals)

        cnt=0
        intervals.sort(key=lambda x:x[1])

        end_value=intervals[0][1]

        for i in range(1,n):
            if intervals[i][0] < end_value:
                cnt+=1
            
            else:
                end_value=intervals[i][1]
        
        return cnt

TC->O(Nlogn)+O(N)
SC->O(1)
