Method 1-> using naive approach -> use two nested loops

Explanation:- The idea is to iterate through each train and for that train, check how many other trains have 
overlappingtimings with it - where current train's arrival time falls between the other train's arrival and departure times. 
We keep track of this count for each train and continuously update our answer with the maximum count found.

Code:- 
def minPlatform(arr, dep):
    n = len(arr)
    res = 0

    # Run a nested for-loop to find the overlap
    for i in range(n):

        # Initially one platform is needed
        cnt = 1
        for j in range(n):
            if i != j:

                # Increment cnt if trains have overlapping
                # time.
                if arr[i] >= arr[j] and dep[j] >= arr[i]:
                    cnt += 1

        # Update the result
        res = max(cnt, res)
    return res
TC->O(N^2)
SC->O(1)



Method 2 -> Greedy approach

Explanation:- This approach uses sorting and two-pointer to reduce the complexity. First, we sort the arrival and 
departure times of all trains. Then, using two pointers, we traverse through both arrays.

Minimum Platforms needed on railway station = Maximum platforms needed at any time = 3

Step by Step implementation:

Sort the arrival and departure times so we can process train timings in order.
Initialize two pointers:
One for tracking arrivals (i = 0).
One for tracking departures (j = 0).
Iterate through the arrival times:
If the current train arrives before or at the departure of an earlier train, allocate a new platform (cnt++).
Otherwise, if the arrival time is greater than the departure time, it means a train has left, freeing up a platform (cnt--), 
and move the departure pointer forward (j++).
Update the maximum number of platforms required after each step.
Continue this process until all trains are processed.

Code:-

def calculateMinPatforms(at, dt, n):
    # Write your code here.
    at.sort()
    dt.sort()

    count=0
    max_count=0
    i=0
    j=0

    while i<n:
        if at[i] <= dt[j]:
            count+=1
            i+=1

        else:
            count-=1
            j+=1

        max_count=max(max_count,count)

    return max_count
TC->O(nlogn)+O(nlogn)+O(2N)
SC->O(1)
