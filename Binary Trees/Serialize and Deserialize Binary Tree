Method 1->

string serialize(TreeNode* root) {
        if(root==NULL){
            return "";
        }
        queue<TreeNode*> q;
        q.push(root);
        string s="";

        while(!q.empty()){
            auto cur=q.front();
            q.pop();
            if(cur==NULL) s.append("#,");
            else s.append(to_string(cur->val)+",");

            if(cur!=NULL){
                q.push(cur->left);
                q.push(cur->right);
            }
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.size()==0) return NULL;
        stringstream s(data);
        string str;
        getline(s,str,',');

        TreeNode* root=new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();

            getline(s,str,',');
            if(str=="#"){
                node->left=NULL;
            }
            else{
                TreeNode* leftNode= new TreeNode(stoi(str));
                node->left=leftNode;
                q.push(leftNode);
            }

            getline(s,str,',');
            if(str=="#"){
                node->right=NULL;
            }
            else{
                TreeNode* rightNode= new TreeNode(stoi(str));
                node->right=rightNode;
                q.push(rightNode);
            }
        }
        return root;
    }
   
  TC->O(N)
  SC->O(N)
