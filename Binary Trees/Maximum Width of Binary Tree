Method 1->

Approach :
Basically we have to maintain index value while traversing binary tree. On each node we set index value such that left node is not null then left node index value will be (2*(current_index)+1) and also right node is not null then right node index value will be (2*(current_index)+2). At each level we check maximum width of binary tree using this formulla first node index value minus last node index value of current level plus one

Paper Dry Run:


~Time Complexity: O(N)

Reason: We are doing a simple level order traversal. The inner loop simply traverses the nodes level-wise and doesnâ€™t add to the complexity.
~Space Complexity: O(N)

Method 1->
 int widthOfBinaryTree(TreeNode* root) {
        long ans=0;
        if(!root) return ans;
        queue<pair<TreeNode*,int>> q;
        q.push({root,0});
        while(!q.empty()){
            int size=q.size();
            long start=q.front().second;
            long end=q.back().second;
            ans=max(end-start+1,ans);
            for(int i=0;i<size;i++){
                TreeNode* temp=q.front().first;
                long idx=q.front().second;
                q.pop();
                if(temp->left) q.push({temp->left,2*idx+1});
                if(temp->right) q.push({temp->right,2*idx+2});
            }
        }
        return ans;
    }
    TC->O(N)
    SC->O(N)
