Method 1->
void traverseLeft(Node* root,vector<int> &ans){
    //base case
    if(root==NULL){
        return;
    }
    if(root->left==NULL && root->right==NULL){
        return;
    }
    
    ans.push_back(root->data);
    if(root->left!=NULL){
        traverseLeft(root->left,ans);
    }
    else{
        traverseLeft(root->right,ans);
    }
}

void traverseLeafNodes(Node* root,vector<int> &ans){
    //base case
    if(root==NULL){
        return;
    }
    if(root->left==NULL && root->right==NULL){
        ans.push_back(root->data);
        return;
    }
    traverseLeafNodes(root->left,ans);
    traverseLeafNodes(root->right,ans);
    
    
}

void traverseRight(Node* root,vector<int> &ans){
    if(root==NULL){
        return ;
    }
    if(root->left==NULL && root->right==NULL){
        return;
    }
    if(root->right!=NULL){
       traverseRight(root->right,ans); 
    }
    else{
        traverseRight(root->left,ans);
    }
    
    ans.push_back(root->data);
}
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        ans.push_back(root->data);
        
        //left part
        traverseLeft(root->left,ans);
        
        //leaf nodes
        
        //left subtree
        traverseLeafNodes(root->left,ans);
        //right subtree
        traverseLeafNodes(root->right,ans);
        
        //right part
        traverseRight(root->right,ans);
        
        return ans;
    }
  
  TC->O(N)
  SC->O(N)
