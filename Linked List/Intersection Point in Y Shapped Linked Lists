Method 1-> brute force approach(using two loops)
Node* getIntesectionNode(Node* head1, Node* head2)
{
    while (head2) {
        Node* temp = head1;
        while (temp) {
            // if both Nodes are same
            if (temp == head2)
                return head2;
            temp = temp->next;
        }
        head2 = head2->next;
    }
    // intersection is not present between the lists
    return NULL;
}
TC->O(n*m)
SC->O(1)

Method 2-> using hashmap
void MegeNode(Node* n1, Node* n2)
{
    unordered_set<Node*> hs;
    while (n1 != NULL) {
        hs.insert(n1);
        n1 = n1->next;
    }
    while (n2) {
        if (hs.find(n2) != hs.end()) {
            cout << n2->data << endl;
            break;
        }
        n2 = n2->next;
    }
}
TC->O(n+m)
SC->O(n)

Method 3-> optimized approach
int intersectPoint(Node* head1, Node* head2)
{
    // Your Code Here
    Node* ptr1=head1;
    Node* ptr2=head2;
    
    if(head1==NULL || head2==NULL){
        return NULL;
    }
    while(ptr1!=ptr2){
        ptr1=ptr1->next;
        ptr2=ptr2->next;
        
        if(ptr1==ptr2){
            return ptr1->data;
        }
        
        if(ptr1==NULL) ptr1=head2;
        if(ptr2==NULL) ptr2=head1;
    }
    return ptr1->data;
}
TC->O(n+m)
SC->O(1)
