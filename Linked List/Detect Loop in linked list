Method 1-> flooyds algo

bool detectLoop(Node* head)
{

       Node* slow=head;
       Node* fast=head;
       while(fast !=NULL && fast->next != NULL){
           slow=slow->next;
           fast=fast->next->next;
           if(slow == fast){
               return 1;
           }
       }
       return 0;
    }
  
  TC->O(n)
  SC->O(1)
  
  Method 2-> naive approach(use hashset)
  bool detectLoop(Node* head)
    {
        // your code here
        unordered_set<Node*> s;
    while (head != NULL) {
       
        if (s.find(head) != s.end())
            return true;

        s.insert(head);
  
        head = head->next;
    }
  
    return false;
    }
    TC->O(n)
    SC->O(n)
  
  Method 3->hashmap
   bool hasCycle(ListNode *head) {
        if(head==NULL){
            return false;
        }
        unordered_map<ListNode*,bool>visited;
        ListNode* temp=head;
        while(temp!=NULL){
            if(visited[temp]==true){
                return true;
            }
            visited[temp]=true;
            temp=temp->next;
            
        }
        return false;
    }
    TC->O(n)
    SC->O(n)
