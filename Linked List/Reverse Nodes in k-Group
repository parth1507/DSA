Method 1->recursive method

 int lengthOfLinkedList(ListNode* &head){
        ListNode* temp=head;
        int len=0;
        while(temp!=NULL){
            temp=temp->next;
            len++;
        }
        return len;
    }
    ListNode* reverseKGroup(ListNode* head, int k,int length){
        if(length<k || head==NULL){
            return head;
        }
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* forward=NULL;
        int count=0;
        
        while(curr!=NULL && count<k){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
            count++;
        }
        if(forward!=NULL){
            head->next= reverseKGroup(forward,k,length-k);
        }
        return prev;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        int length=lengthOfLinkedList(head);
        return reverseKGroup(head,k,length);
    }
   
   TC->O(n)
   SC->O(n)
   
   Method 2->iterative method
   ListNode* reverseKGroup(ListNode* head, int k) {
        if(k == 1 || !head -> next) return head;
        
        ListNode* pre = NULL, *curr = head, *nxt, *temp = head;
        
        int n = 0;
        while(temp){
            n++;
            temp = temp -> next;
        }
        
        for(int i=0; i<n/k; i++){
            ListNode *first = pre, *newEnd = curr;
            
            for(int i=0; i<k; i++){
                nxt = curr -> next;
                curr -> next = pre;
                pre = curr;
                curr = nxt;
            }
            
            first ? first -> next = pre : head = pre;
            newEnd -> next = curr;
            pre = newEnd;  
        }
        
        return head;
    }
    TC->O(n)
    SC->O(1)
