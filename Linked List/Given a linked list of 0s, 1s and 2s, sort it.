Method 1-> naive approach
 Node* segregate(Node *head) {
        
        // Add code hereif
        if(head==NULL) return NULL;
        if(head->next==NULL) return head;
        
        Node* temp=head;
        int countZero=0;
        int countOne=0;
        int countTwo=0;
        
        while(temp!=NULL){
            if(temp->data==0) countZero++;
            else if(temp->data==1) countOne++;
            else if(temp->data==2) countTwo++;
            
            temp=temp->next;
        }
        
        temp=head;
        while(temp!=NULL){
            if(countZero!=0){
                temp->data=0;
                countZero--;
            }
            else if(countOne!=0){
                temp->data=1;
                countOne--;
            }
            else if(countTwo!=0){
                temp->data=2;
                countTwo--;
            }
            temp=temp->next;
        }
        return head;
        
    }
   TC->O(n)
   SC->O(1)
   
  method 2->optimized approach
  void insertAtTail(Node* &tail,Node* &curr){
    tail->next=curr;
    tail=curr;
}
Node* sortList(Node *head)
{
    Node* zeroHead=new Node(-1);
    Node* zeroTail=zeroHead;
    Node* oneHead=new Node(-1);
    Node* oneTail=oneHead;
    Node* twoHead=new Node(-1);
    Node* twoTail=twoHead;
    
    Node* curr=head;
    while(curr!=NULL){
        int value=curr->data;
        if(value==0){
            insertAtTail(zeroTail,curr);
        }
        else if(value==1){
            insertAtTail(oneTail,curr);
        }
        else if(value==2){
            insertAtTail(twoTail,curr);
        }
        curr=curr->next;
    }
    if(oneHead->next!=NULL){
        zeroTail->next=oneHead->next;
    }
    else{
        zeroTail->next=twoHead->next;
    }
    oneTail->next=twoHead->next;
    twoTail->next=NULL;
    head=zeroHead->next;
    delete zeroHead;
    delete oneHead;
    delete twoHead;
    
    return head;
}
TC->O(n)
SC->O(1)
