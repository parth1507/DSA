Method 1->

int countNode(struct Node* root){
        if(root==NULL){
            return 0;
        }
        
        int ans=1+countNode(root->left)+countNode(root->right);
        
        return ans;
    }
    
    bool isCBT(struct Node* root,int index,int countNode){
        if(root==NULL){
            return true;
        }
        
        if(index>=countNode){
            return false;
        }
        
        else{
            bool left=isCBT(root->left,2*index+1,countNode);
            bool right=isCBT(root->right,2*index+2,countNode);
            
            return(left && right);
        }
    }
    
    bool isMaxHeap(struct Node* root){
        if(root->left==NULL && root->right==NULL){
            return true;
        }
        
        if(root->right==NULL){
            return (root->data > root->left->data);
        }
        else{
            bool left=isMaxHeap(root->left);
            bool right=isMaxHeap(root->right);
            
            return ((root->data > root->left->data) && (root->data > root->right->data) && left && right);
        }
        
    }
    
    bool isHeap(struct Node* tree) {
        int index=0;
        int totalNode=countNode(tree);
        
        if(isCBT(tree,index,totalNode) && isMaxHeap(tree)){
            return true;
        }
        else{
            return false;
        }
    }
    TC->O(N)+O(N)+O(N)=O(N)
    SC->O(H)
