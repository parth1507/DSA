Method 1-> using heapify algorithm

void heapify(vector<int> &ans,int n,int i){
        int largest=i;
        int left=2*i+1;
        int right=2*i+2;
        
        if(left<n && ans[largest] < ans[left]){
            largest=left;
        }
        
        if(right < n && ans[largest] < ans[right]){
            largest=right;
        }
        
        if(largest!=i){
            swap(ans[largest],ans[i]);
            heapify(ans,n,largest);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        
        for(auto i:a){
            ans.push_back(i);
        }
        for(auto i:b){
            ans.push_back(i);
        }
        
        int size=ans.size();
        for(int i=size/2-1;i>=0;i--){
            heapify(ans,size,i);
        }
        
        return ans;
    }
    TC->O(n+m) + O(n+m)
    SC->O(n+m)
    
    Method 2-> using priority queue
       vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
         vector<int> v;

      vector<int> ans;

      priority_queue<int> q;

      for(int i=0;i<n;i++){

          v.push_back(a[i]);

      }

      for(int i=0;i<m;i++){

          v.push_back(b[i]);

      }

      for(int i=0;i<n+m;i++){

          q.push(v[i]);

      }

      while(!q.empty()){

          ans.push_back(q.top());

          q.pop();

      }

      return ans;
    }
    TC->O(n+m)
    SC->O(n+m)
    
