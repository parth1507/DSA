Method 2-> using minheap

class node{
      public:
      int val,apos,vpos;
      node(int v,int ap,int vp){
          val=v;
          apos=ap;
          vpos=vp;
      }
    };
    
    struct mycomp{
        bool operator()(node* &d1, node* &d2){
            return d1->val > d2->val;
        }
    };
    
class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        vector<int> ans;
        priority_queue<node*,vector<node*>, mycomp> pq;
        
        for(int i=0;i<K;i++){
            node* temp= new node(arr[i][0],i,0);
            pq.push(temp);
        }
        
        while(!pq.empty()){
            node* curr=pq.top();
            pq.pop();
            ans.push_back(curr->val);
            
            int ap=curr->apos;
            int vp=curr->vpos;
            
            if(vp+1 < arr[ap].size()){
                node* next= new node(arr[ap][vp+1],ap,vp+1);
                pq.push(next);
            }
        }
        return ans;
    }
};

TC->O(n*k log(k))
SC->(n*k)

Method 2-> brute force

#include <bits/stdc++.h> 
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    vector<int> res;
    
    for(int i=0;i<kArrays.size();i++){
        for(int j=0;j<kArrays[i].size();j++){
            res.push_back(kArrays[i][j]);
        }
    }
    
    sort(res.begin(),res.end());
    
    return res;
}

TC->O(n*k log(n*k))
SC->O(n*k)
