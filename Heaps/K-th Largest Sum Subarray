Method 1-> using two loops

int getKthLargest(vector<int> &arr, int k)
{
	vector<int> sumStore;
    int n=arr.size();
    
    for(int i=0;i<n;i++){
        int sum=0;
        for(int j=i;j<n;j++){
            sum+=arr[j];
            sumStore.push_back(sum);
        }
    }
    
    sort(sumStore.begin(),sumStore.end());
    
    return sumStore[sumStore.size()-k];
}

TC->O(n^2logn)
SC->O(n^2)

Method 2-> using minheap concept

int kthLargest(vector<int> &Arr,int N,int K){
        priority_queue<int,vector<int>,greater<int> > pq;
        
        for(int i=0;i<N;i++){
            int sum=0;
            for(int j=i;j<N;j++){
                sum+=Arr[j];
                if(pq.size() < K){
                    pq.push(sum);
                }
                else{
                    if(sum > pq.top()){
                        pq.pop();
                        pq.push(sum);
                    }
                }
            }
        }
        return pq.top();
    }
    TC->O(N^2 logk)
    SC->O(k)
