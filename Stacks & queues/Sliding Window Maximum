Method 1-> Brute Force

Explanation:-
The idea is to run the nested loops, the outer loop will mark the starting point of the subarray of length k, and the 
inner loop will run from the starting index to index + k, and print the maximum element among these k elements. 

Code:- 
def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n=len(nums)
        ans=[]

        for i in range(0,n-k+1):
            maxi=nums[i]
            for j in range(i,i+k):
                maxi=max(maxi,nums[j])
            
            ans.append(maxi)
        
        return ans

TC->O(n*k)
SC->O(n-k)

Method 2-> Optimized method-> using Monotonic Stack

Explanation:- Create a Deque, dq of capacity k, that stores only useful elements of current window of k elements. 
An element is useful if it is in current window and is greater than all other elements on right side of it in current 
window. Process all array elements one by one and maintain dq to contain useful elements of current window and these 
useful elements are maintained in sorted order. The element at front of the dq is the largest and element at rear/back 
of dq is the smallest of current window.

Code:-
def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:

        n=len(nums)
        ans=[]
        deq=deque()

        for i in range(0,n):
            while len(deq)!=0 and deq[0]<=i-k:
                deq.popleft()
            
            while len(deq)!=0 and nums[i]>=nums[deq[-1]]:
                deq.pop()
            
            deq.append(i)

            if i>=k-1:
                ans.append(nums[deq[0]])
        
        return ans

TC->O(N)
SC->O(k)
