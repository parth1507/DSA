Method 1-> Brute Force:

def sumOfMax(self, arr):
        # code here
        n=len(arr)
        sum_of_subarrays_max=0
        
        for i in range(0,n):
            max_ele=arr[i]
            for j in range(i,n):
                max_ele=max(max_ele,arr[j])
                sum_of_subarrays_max+=max_ele
        
        return sum_of_subarrays_max

TC->O(N^2)
SC->O(1)

Method 2:- Optimized solution using stack and next greater and previous element concept

Explanation:- The intuition behind this approach is to efficiently determine the range of subarrays where each element 
is the maximum by leveraging the previous and next greater elements. By using stacks, the methods avoid the need for 
nested loops, making the solution more efficient. The final sum is calculated by considering the contribution of each 
element to the subarrays where it is the maximum, ensuring the result is computed in linear time.

Code:- 
def find_prev_greater_ele(self,arr):
        n=len(arr)
        stack=[]
        ans=[-1]*n
        
        for i in range(0,n):
            while len(stack)!=0 and arr[stack[-1]]<=arr[i]:
                stack.pop()
            
            if len(stack)==0:
                ans[i]=-1
            
            else:
                ans[i]=stack[-1]
            
            stack.append(i)
        
        return ans
    
    
    def find_next_greater_ele(self,arr):
        n=len(arr)
        stack=[]
        ans=[n]*n
        
        for i in range(n-1,-1,-1):
            while len(stack)!=0 and arr[i] > arr[stack[-1]]:
                stack.pop()
            
            if len(stack)==0:
                ans[i]=n
            
            else:
                ans[i]=stack[-1]
            
            stack.append(i)
        
        return ans

    def sumOfMax(self, arr):
        # code here
        n=len(arr)
        pge=self.find_prev_greater_ele(arr)
        nge=self.find_next_greater_ele(arr)
        sum_of_max_subarrays=0
        modulo=10**9+7
        
        for i in range(0,n):
            leftIndex=i-pge[i]
            rightIndex=nge[i]-i
            
            sum_of_max_subarrays+=(arr[i]*(leftIndex*rightIndex))
        
        return sum_of_max_subarrays

TC->O(5N)
SC->O(5N)
