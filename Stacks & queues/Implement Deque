Method 1->
class Deque
{
    int* arr;
    int front, rear, size;
public:
    // Initialize your data structure.
    Deque(int n)
    {
        //constructor
        size = n;
        arr = new int[size];
        front = rear = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        //condn - 1 => full
        //front!=0 && => this for if front = 0, then negative value will come
        if(isFull()){
        return false;
        }
        else if(isEmpty()){
            //2nd condn
            front = rear = 0;
        }
        else if(front==0 && rear!=size-1){    //3rd condn => cyclic nature
            front = size-1;
        }
        else{
            //normal flow
            front--;
        }
        arr[front] = x;    //store value
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        //condn - 1 => full
        if(isFull()){
        return false;
        }
        else if(isEmpty()){
            //2nd condn    => insert first element
            front = rear = 0;
        }
        else if(rear == size-1 && front!=0){    //3rd condn => cyclic nature
            rear = 0;
        }
        else{
            //normal flow
            rear++;
        }
        arr[rear] = x;    //store value
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
         //check empty
        if(isEmpty()){
//             cout<<"Q empty";
            return -1;
        }
        
        //single element present
        int ans = arr[front];
        arr[front] = -1;
        if(front == rear){
            //start me aa jao
            front = rear = -1;
        }
        else if(front == size-1){    //front end pe => circular
        front = 0;    //to maintain cycle nature
        }
        else{
            //normal
            front++;
        }
        return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
         //check empty
        if(isEmpty()){
//             cout<<"Q empty";
            return -1;
        }
        
        //single element present
        int ans = arr[rear];
        arr[rear] = -1;
        if(front == rear){
            //start me aa jao
            front = rear = -1;
        }
        else if(rear==0){    //front end pe => circular
        rear = size-1;    //to maintain cycle nature
        }
        else{
            //normal
            rear--;
        }
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty()){
            return -1;
        }
        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        if(isEmpty()){
            return -1;
        }
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if(front==-1){
            return true;
        }
        else{
        return false;
        }
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        if((front == 0 && rear == size-1) || (front!=0 && rear == (front-1)%(size-1))){
            return true;
        }
        else{
            return false;
        }
    }
};

TC->O(1)
SC->O(1)
