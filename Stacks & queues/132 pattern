Method 1-> brute force approach
bool find132pattern(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    if(nums[i]<nums[k] && nums[k]<nums[j]){
                        return true;
                    }
                }
            }
        }
        return false;
    }
  TC->O(N^3)
  SC->O(1)
  
  Method 2->better approach
  bool find132pattern(vector<int>& nums) {
        int n=nums.size();
        int mine=nums[0];
        
        for(int j=1;j<n;j++){
            for(int k=j+1;k<n;k++){
                if(mine<nums[k] && nums[k]<nums[j]){
                    return true;
                }
                mine=min(mine,nums[j]);
            }
        }
        return false;
    }
  TC->O(N^2)
  SC->O(1)
  
 Method 3-> optimized approach
 bool find132pattern(vector<int>& nums) {
        int thirdElement=INT_MIN;
        stack<int> s;
        
        for(int i=nums.size()-1;i>=0;i--){
            if(nums[i]<thirdElement) return true;
            while(!s.empty() && s.top()<nums[i]){
                thirdElement=s.top();
                s.pop();
            }
            s.push(nums[i]);
        }
        return false;
    }
  TC->O(N)
  SC->O(N)
