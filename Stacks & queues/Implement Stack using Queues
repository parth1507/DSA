Method 1-> using two queues
queue<int> q1;
    queue<int> q2;
    MyStack() {
        
    }
    
     void push(int x) {
      q2.push(x);
        while(!q1.empty()){
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1,q2);
    }
    
    int pop() {
      int n=q1.front();
        q1.pop();
        return n;
    }
    
    int top() {
      return q1.front();  
    }
    
    bool empty() {
       if(q1.empty())
           return true;
        return false;
    }
  TC->O(N)
  SC->O(2N)
  
  Method 2-> using one queue
  queue<int> q1;
    MyStack() {
        
    }
    
    void push(int x) {
        q1.push(x);
        for(int i=0;i<q1.size()-1;i++){
            q1.push(q1.front());
            q1.pop();
        }
    }
    
    int pop() {
        if(!q1.empty()){
            int val=q1.front();
            q1.pop();
            return val;
        }
        return -1;
    }
    
    int top() {
       if(q1.size()>0)  return q1.front();
		return -1;
    }
    
    bool empty() {
        return q1.empty();
    }
    
    TC->O(N)
    SC->O(N)
