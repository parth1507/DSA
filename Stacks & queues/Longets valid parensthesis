Method 1->
int longestValidParentheses(string s) {
        stack<int> st;
        int ans=0;
        st.push(-1);
        
        for(int i=0;i<s.length();i++){
            if(s[i]=='('){
                st.push(i);
            }
            else{
                st.pop();
                if(st.empty()){
                    st.push(i);
                }
                else{
                    ans=max(ans,i-st.top());
                }
            }
        }
        return ans;
    }
  TC->O(N)
  SC->O(N)
  
  Method 2->
   int longestValidParentheses(string s) {
        int left=0,right=0,ans=0;
        
        for(int i=0;i<s.length();i++){
            if(s[i]=='('){
                left++;
            }
            else{
                right++;
            }
            if(left==right){
                ans=max(ans,2*right);
            }
            else if(right>left){
                left=right=0;
            }
        }
        
        left=right=0;
        
        for(int i=s.length()-1;i>=0;i--){
            if(s[i]=='('){
                left++;
            }
            else{
                right++;
            }
            if(left==right) ans=max(ans,2*right);
            else if(left>right){
                left=right=0;
            }
        }
        return ans;
    }
  TC->O(N)
  SC->O(1)
