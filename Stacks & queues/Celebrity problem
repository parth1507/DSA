Method 1-> brute force

int celebrity(vector<vector<int> >& M, int n) 
    {
        int in[n]={0};
        int out[n]={0};
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(M[i][j]==1){
                    in[j]++;
                    out[i]++;
                }
            }
        }
        
        for(int i=0;i<n;i++){
            if(in[i]==n-1 && out[i]==0){
                return 1;
            }
        }
        return -1;
    }
  TC->O(N^2)
  SC->O(N)
  
  Method 2->better approach
  private:
    bool knows(vector<vector<int> >& M,int a,int b,int n){
        if(M[a][b]==1) return true;
        else return false;
    }
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> s;
        for(int i=0;i<n;i++){
            s.push(i);
        }
        while(s.size()>1){
            int a=s.top();
            s.pop();
            
            int b=s.top();
            s.pop();
            
            if(knows(M,a,b,n)){
               s.push(b);
            }
            else{
                s.push(a);
            }
        }
        int ans=s.top();
        
        int zeroCount=0;
        for(int i=0;i<n;i++){
            if(M[ans][i]==0){
                zeroCount++;
            }
        }
        if(zeroCount!=n) return -1;
        
        int oneCount=0;
        for(int i=0;i<n;i++){
            if(M[i][ans]==1){
                oneCount++;
            }
        }
        if(oneCount!=n-1) return -1;
        
        return ans;
    }
    TC->O(N)
    SC->O(N)
