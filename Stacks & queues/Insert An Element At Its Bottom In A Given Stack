method 1-> recursive method
void solve(stack<int>& s,int x){
    if(s.empty()){
        s.push(x);
        return;
    }
     
    int num=s.top();
    s.pop();
    solve(s,x);
    s.push(num);
}

stack<int> pushAtBottom(stack<int>& myStack, int x) 
{
    solve(myStack,x);
    return myStack;
}
TC->O(n)
SC->O(n)

Method 2-> iterative method
stack<int> pushAtBottom(stack<int>& myStack, int x) 
{
    stack<int> s;
    if(myStack.empty())
    {
        myStack.push(x);
        return myStack;
    }
    else{
        while(!myStack.empty()){
        s.push(myStack.top());
        myStack.pop();
    }
    myStack.push(x);
    while(!s.empty()){
        myStack.push(s.top());
        s.pop();
    }
    return myStack;
    }
    
}
TC->O(N)
SC->O(N)
