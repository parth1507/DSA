Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

Method 1-> DP
class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size(), res = 0;
        vector<vector<int>> dp(n, vector<int>(n, 0));

        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                if (i == j)  dp[i][j] = 1;
                else if (j == i + 1 && s[i] == s[j])   dp[i][j] = 1;
                else if (s[i] == s[j])   dp[i][j] = dp[i + 1][j - 1];
                res += dp[i][j];
            }
        }
        return res;
    }
};

TC - O(N ^ 2);
SC - O(N ^ 2);

Method 2-> Two pointers Approach
int countSubstrings(string s) {
        int n=s.size();
        if(n==0 || n==1) return n;
        
        int count=0;
        for(int i=0;i<n;i++){
            int j=i;
            int k=i;
            while(k>=0 && j<n && s[k]==s[j]){
                count++;
                k--;
                j++;
            }
            
             k=i;
             j=i+1;
            while(k>=0 && j<n && s[k]==s[j]){
                count++;
                k--;
                j++;
            }
        }
        return count;
    }
    TC->O(N^2)
    SC->O(1)
