Example 1:

Input: N = 5, arr[] = {20, 10, 4, 50, 100}
W = 5
Output: 14
Explanation: choose two oranges to minimize 
cost. First orange of 2Kg and cost 10. 
Second orange of 3Kg and cost 4. 

Example 2:

Input: N = 5, arr[] = {-1, -1, 4, 3, -1}
W = 5
Output: -1
Explanation: It is not possible to buy 5 
kgs of oranges

Code:-
method1-> space optimized approach

int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
        int dp[W+1];
        for(int i=0;i<=W;i++){
            dp[i]=INT_MAX;
        }
        dp[0]=0;
        for(int i=1;i<=W;i++){
            for(int j=1;j<=N;j++){
                if(j<=i){
                    if(cost[j-1]!=-1 && dp[i-j]!=INT_MAX){
                        dp[i]=min(dp[i],cost[j-1]+dp[i-j]);
                    }
                }
            }
        }
        return dp[W]==INT_MAX?-1:dp[W];
	} 
};
TC->O(N*W)
SC->O(W)


Method 2-> DP
	int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
         long long dp[N+1][W+1];
      for (int i=0;i<=N;i++)
      {
          for (int j=0;j<=W;j++)
          {
              if (i==0) dp[i][j]=INT_MAX;
              else if (j==0) dp[i][j]=0;
              else if (cost[i-1]==-1) dp[i][j]=dp[i-1][j];
              else if (i<=j)
              {
                  dp[i][j]=min(cost[i-1]+dp[i][j-i],dp[i-1][j]);
              }
              else dp[i][j]=dp[i-1][j];
          }
      }
      return dp[N][W]==INT_MAX ? -1 : dp[N][W];
	}
TC-> O(N*W)
SC-> O(N*W)
