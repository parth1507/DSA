Example 1:

Input: N = 9, K = 4  
arr[] = {1,3,4,9,10,11,12,17,20}
Output: 5
Explanation: Remove 1, 3, 4 from beginning
and 17, 20 from the end.
Example 2:

Input: N = 5, K = 2 
arr[] = {1, 5, 6, 2, 8} 
Output: 3
Explanation: There are multiple ways to
remove elements in this case.
One among them is to remove 5, 6, 8.
The other is to remove 1, 2, 5

Method 1->DP(Memoization)
int dp[101][101];
    int solve(vector<int>& a,int k,int i,int j){
        if(i>=j) return 0;
        if(a[j]-a[i]<=k) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        return dp[i][j]=1+min(solve(a,k,i+1,j),solve(a,k,i,j-1));
    }
    int removals(vector<int>& a, int k){
        //Code here
        sort(a.begin(),a.end());
        memset(dp,-1,sizeof(dp));
        
        return solve(a,k,0,a.size()-1);
    }
  TC->O(N^2)
  SC->O(N^2)
  
Method 2->Binary Search
 int removals(vector<int>& a, int k){
        sort(a.begin() , a.end());
       int n = a.size();
       int ans = n;
       for(int i = 0; i < n; i++){
           int req = a[i] + k;
           int l = i , r = n - 1, pos = i;
           while(l <= r){
               int  mid = l + (r - l)/2;
               if(a[mid] <= req){
                   pos = max(pos, mid);
                   l = mid + 1;
               }
               else{
                   r = mid - 1;
               }
           }
           ans = min(ans , n - (pos - i + 1));
       }
       return ans;
    }
   TC->O(NlogN)
   SC->O(1)
