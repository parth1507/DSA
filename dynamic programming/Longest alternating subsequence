Example 1:

Input: nums = {1,5,4}
Output: 3
Explanation: The entire sequenece is a 
alternating sequence.
Examplae 2:

Input: nums = {1,17,5,10,13,15,10,5,16,8}
Output: 7
Explanation: There are several subsequences
that achieve this length. 
One is {1,17,10,13,10,16,8}.

Method 1-> space optimized method
	int AlternatingaMaxLength(vector<int>&nums){
		    // Code here
		    int inc=1;
		    int dec=1;
		    
		    for(int i=1;i<nums.size();i++){
		        if(nums[i]>nums[i-1]){
		            inc=dec+1;
		        }
		        if(nums[i]<nums[i-1]){
		            dec=inc+1;
		        }
		    }
		    return max(inc,dec);
		}
  TC->O(n)
  SC->O(1)

Method 2-> DP
int AlternatingaMaxLength(vector<int>&nums){
		    // Code here
		    int n=nums.size();
		    if(n==1) return 1;
		    int dp[n][2];
		    
		    for(int i=0;i<n;i++){
		        dp[i][0]=dp[i][1]=1;
		    }
		    int ma=0;
		    for(int i=1;i<n;i++){
		        for(int j=0;j<i;j++){
		            if(nums[i]>nums[j] && dp[i][0]<dp[j][1]+1){
		                dp[i][0]=dp[j][1]+1;
		            }
		            if(nums[i]<nums[j] && dp[i][1]<dp[j][0]+1){
		                dp[i][1]=dp[j][0]+1;
		            }
		        }
		        ma=max(ma,max(dp[i][0],dp[i][1]));
		    }
		    return ma;
		}
TC->O(n^2)
SC->O(n)
