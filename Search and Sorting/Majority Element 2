Method 1-> brute force 
vector<int> majorityElement(vector<int>& nums) {
		int n = nums.size();
		set<int>s;
		vector<int>ans;
		for(int i = 0; i < n; i++) {
			int cnt = 1;
			for(int j = i+1; j < n; j++) {
				if(nums[i] == nums[j])
					cnt++;
			}
			if(cnt > n/3  && s.find(nums[i]) == s.end()) {
				ans.push_back(nums[i]);
				s.insert(nums[i]);
			}
		}
		return ans;
	}
TC->O(n^2)
SC->O(1)

Method 2->using hash map
vector<int> majorityElement(vector<int>& nums) {
		int n = nums.size();
		map<int,int>mp;
		for(auto it : nums)
			mp[it]++;
		vector<int>ans;
		for(auto it : mp) {
			if(it.second > n/3)
				ans.push_back(it.first);
		}
		return ans;
	}
  TC->O(nlogn)
  SC->O(n)
  
  Method 3->using moore algorithm
   vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
		int cnt1 = 0, cnt2 = 0, ele1 = INT_MIN, ele2 = INT_MIN;
		for(int i = 0; i < n; i++) {
			if(ele1 == nums[i]) 
				cnt1++;
			else if(ele2 == nums[i])
				cnt2++;
			else if(cnt1 == 0) {
				ele1 = nums[i];
				cnt1 = 1;
			}
			else if(cnt2 == 0) {
				ele2 = nums[i];
				cnt2 = 1;
			}
			else {
				cnt1--, cnt2--;
			}
		}
		int c1 = 0, c2 = 0;
		for(int i = 0; i < n; i++) {
			if(nums[i] == ele1)
				c1++;
			if(nums[i] == ele2)
				c2++;
		}
		vector<int>ans;
		if(c1 > n/3)
			ans.push_back(ele1);
		if(c2 > n/3)
			ans.push_back(ele2);
		return ans;
    }
    TC->O(n)
    SC->O(1)
