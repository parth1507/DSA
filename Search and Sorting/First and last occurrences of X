Method 1->naive approach
 vector<int> firstAndLast(vector<int> &arr, int n, int x) {
        // Code here
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(arr[i]==x) {
             ans.push_back(i);
            break;
            }
        }
        for(int j=n-1;j>=0;j--){
            if(arr[j]==x) {
            ans.push_back(j);
            break;   
            }
        }
        if(ans.size()==0) ans.push_back(-1);
        
        return ans;
    }
    TC->O(n)
    SC->O(1)
    
    Method 2-> using sorting 
    int firstOccBS(vector<int>& nums,int target){
        int start=0;
        int end=nums.size()-1;
        int index=-1;
        while(start<=end){
            int mid = start + (end-start)/2;
            if(target == nums[mid]){
                index=mid;
                end=mid-1;
            }
            else if(target < nums[mid]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return index;
    }
    int lastOccBS(vector<int>& nums,int target){
        int start=0;
        int end=nums.size()-1;
        int index=-1;
        while(start<=end){
            int mid = start + (end-start)/2;
            if(target == nums[mid]){
                index=mid;
                start=mid+1;
            }
            else if(target < nums[mid]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return index;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
         vector<int> v;
        
        int firstOccurenceIndex = firstOccBS(nums,target);
        int lastOccurenceIndex = lastOccBS(nums,target);
        v.push_back(firstOccurenceIndex);
        v.push_back(lastOccurenceIndex);
        
        return v;
        
    }
    TC->O(logn)
    SC->O(1)
