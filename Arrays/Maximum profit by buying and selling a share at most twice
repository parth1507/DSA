Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Method 1->
int maxProfit(vector<int>& prices) {
        int n=prices.size();
     int profit[n];
    for (int i = 0; i < n; i++)
        profit[i] = 0;
 
    int max_price = prices[n - 1];
    for (int i = n - 2; i >= 0; i--) {
        
        if (prices[i] > max_price)
            max_price = prices[i];
        profit[i]= max(profit[i + 1], max_price - prices[i]);
    }
 
    int min_price = prices[0];
    for (int i = 1; i < n; i++) {
        // min_price is minimum price in price[0..i]
        if (prices[i] < min_price)
            min_price = prices[i];
 
        profit[i] = max(profit[i - 1],profit[i] + (prices[i] - min_price));
    }
    int result = profit[n - 1];
 
    //[] profit; // To avoid memory leak
 
    return result;
    }
    TC->O(n)
    SC->O(n)
    
 Method 2->
 int maxProfit(vector<int>& prices) {
         if(!prices.size()) return 0;
        
        int buy1 = INT_MAX;
        int profit1 = INT_MIN;
        int buy2 = INT_MAX;
        int profit2 = INT_MIN;
        
        for(int i=0;i<prices.size();i++)
        {
            buy1 = min(buy1,prices[i]);
            profit1 = max(profit1,prices[i]-buy1);
            buy2 = min(buy2,prices[i]-profit1);
            profit2 = max(profit2,prices[i]-buy2);
        }
        return profit2;
    }
    TC->O(n)
    SC->O(1)
