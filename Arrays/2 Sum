Method 1->naive approach
bool chkPair(int A[], int size, int x) {
    for (int i = 0; i < (size - 1); i++) {
        for (int j = (i + 1); j < size; j++) {
            if (A[i] + A[j] == x) {
                cout << "Pair with a given sum " << x << " is (" << A[i] << ", " << A[j] << ")"
                  << endl;
 
                return 1;
            }
        }
    }
 
    return 0;
}
TC->O(n^2)
SC->O(1)

Method 2-> using unoredered map
vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> m;
        vector<int> ans;
        
        for(int i=0;i<nums.size();i++){
            int val=target-nums[i];
            if(m.find(val)!=m.end()){
                ans.push_back(m[val]);
                ans.push_back(i);
            }
            m[nums[i]]=i;
        }
        return ans;
    }
   TC->O(n)
   SC->O(n)
