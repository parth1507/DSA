Method 1-> using two loops
long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long int count=0;
        for(int i=0;i<N-1;i++){
            for(int j=i+1;j<N;j++){
                if(arr[i]>arr[j] && i<j){
                    count++;
                }
            }
        }
        return count;
    }
    
  TC->O(N^2)
  SC->O(1)
  
  Method 2-> using merge sort
  long long merge1(long long arr[],long long temp[],int left,int mid,int right){
        int i,j,k;
        long long inv=0;
        i=left;
        k=left;
        j=mid;
        
        while((i<=mid-1) && (j<=right)){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                inv+=(mid-i);
            }
        }
        while(i<=mid-1){
            temp[k++]=arr[i++];
        }
        while(j<=right){
            temp[k++]=arr[j++];
        }
        for(int m=left;m<=right;m++){
            arr[m]=temp[m];
        }
        return inv;
    }
    long long mergesort(long long arr[],long long temp[],int left,int right){
       long long inv=0;
        if(left<right){
            int mid=(left+right)/2;
            
            inv+=mergesort(arr,temp,left,mid);
            inv+=mergesort(arr,temp,mid+1,right);
            inv+=merge1(arr,temp,left,mid+1,right);
        }
        return inv;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long temp[N];
        return mergesort(arr,temp,0,N-1);
    }
    TC->O(Nlogn)
    SC->O(n)
