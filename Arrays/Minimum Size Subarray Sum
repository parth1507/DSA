Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

Method 1-> Two pointers and sliding window technique
int minSubArrayLen(int target, vector<int>& nums) {
        int i=0, j=0;
        int res = INT_MAX;
        int sum = 0;
        while(j < nums.size()){
            sum += nums[j];
            while(sum >= target){
                res = min(res, j-i+1);
                sum -= nums[i];
                i++;
            }
            j++;
        }
        return res == INT_MAX? 0 : res;
    }
    TC->O(n)
    SC->O(1)
