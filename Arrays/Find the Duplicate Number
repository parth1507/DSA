Method 1-> brute force
int findDuplicate(vector<int>& nums) {
        unordered_map<int,int> m;
        int duplicate=0;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        
        
        for(auto it:m){
            if(it.second >1){
                duplicate=it.first;
                break;
            }
        }
        return duplicate;
    }
  TC->O(N)
  SC->O(N)
  
  Method 2-> optimized approach
  int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
  TC->O(N)
  SC->O(1)
