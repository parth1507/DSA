Method 1->
 int triangleNumber(vector<int>& nums) {
        int n=nums.size(),ans=0;
        sort(nums.begin(),nums.end());
        
        for(int i=n-1;i>=2;i--){
            int low=0,high=i-1;
            
            while(low<high){
                if(nums[low]+nums[high]>nums[i]){
                    ans+=(high-low);
                    high--;
                }
                else low++;
            }
        }
        return ans;
    }
    
TC->O(nlogn)+O(n^2)
SC->O(1)

Method 2->naive approach
int findNumberOfTriangles(int arr[], int n)
{
    // Count of triangles
    int count = 0;
 
    // The three loops select three different values from
    // array
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
 
            // The innermost loop checks for the triangle
            // property
            for (int k = j + 1; k < n; k++)
 
                // Sum of two sides is greater than the
                // third
                if (arr[i] + arr[j] > arr[k]
                    && arr[i] + arr[k] > arr[j]
                    && arr[k] + arr[j] > arr[i])
                    count++;
        }
    }
    return count;
}
TC->O(n^3)
SC->O(1)
