Method 1-> using hashmap
int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        unordered_map<int,int>m;
       int res=0;int presum=0;
      for(int  i=0;i<n;i++)
      {
          presum= presum+A[i];
         if(presum==0)
         {
             res=i+1;
         }
          
        
          else if(m.find(presum)!=m.end())
          {
              res=max(res,i-m[presum]);
          }
          else m[presum]=i;
         
          
      }
       return res;
    }
    TC->O(n)
    SC->O(n)
    
    Method 2->naive approach
    int maxLen(int arr[], int n)
{
    // Initialize result
    int max_len = 0;
 
    // Pick a starting point
    for (int i = 0; i < n; i++) {
 
        // Initialize currr_sum for
        // every starting point
        int curr_sum = 0;
 
        // try all subarrays starting with 'i'
        for (int j = i; j < n; j++) {
            curr_sum += arr[j];
 
            // If curr_sum becomes 0,
            // then update max_len
            // if required
            if (curr_sum == 0)
                max_len = max(max_len, j - i + 1);
        }
    }
    return max_len;
}
